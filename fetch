#!/usr/bin/env python3

import os, yaml
from datetime import datetime
from display_heb_on_term import display_rtl_on_terminal
from fetch_items import fetch_items

RTL_START = u'\u202B'
RTL_END = u'\u202C'


url = 'https://www.y net.co.il/news/category/184'.replace(" ", "")

_ = open("terms_to_exclude.txt", encoding="utf-8").read().split("\n")
_ = [ term.strip() for term in _ ]
to_exclude = [ term for term in _ if term!="" ]

def is_skip(text, to_exclude):
    exclude = False
    for t in to_exclude:
        if t in text: exclude = True
    return exclude

def print_text(user_input, texts):
    def p(item_num):
        i = int(item_num.strip())-1
        display_rtl_on_terminal(texts[i])
    if "," in user_input:
        for item_num in user_input.split(","):
            p(item_num)
        exit()
    p(user_input)
    return

def fetch_and_display_headers():
    # 1. Get items
    time_stamps, headers, texts = fetch_items(url)

    # 2. Get last displayed time/date stamp
    last_seen_time_stamp = None
    if os.path.isfile("last_seen_time_stamp.yaml"):
        last_seen_time_stamp_str = yaml.safe_load(open("last_seen_time_stamp.yaml"))
        _ = last_seen_time_stamp_str.replace('Z', '+00:00')
        last_seen_time_stamp = datetime.fromisoformat(_)

    # 3. Display on term the headers not-skipped by keywork + more recent than time stamp
    for i in range(len(time_stamps)-1,-1,-1):
        time_stamp_str = time_stamps[i]
        time_stamp = datetime.fromisoformat(time_stamp_str.replace('Z', '+00:00'))
        if last_seen_time_stamp:
            if time_stamp<last_seen_time_stamp:
                continue
        if is_skip(headers[i], to_exclude): 
            continue
        local_time = time_stamp.astimezone()
        time_stamp_disp = local_time.strftime("%d%b %H:%M")
        header = RTL_START+ headers[i] +RTL_END
        print(str(i+1).rjust(2), time_stamp_disp, header)
    print(f'Now: {datetime.now().strftime("%d%b %H:%M")}')

    # 4. Save time stamp
    yaml.safe_dump(time_stamps[0], open("last_seen_time_stamp.yaml", 'w'))
    
    return texts

# 5. Display full text of specified items
texts = fetch_and_display_headers()
print("Commands: Num of item, numbers seprated by commas,'Enter' to referesh or q to exit")
prompt = " > "
ans = input(prompt)
while True:
    match ans:
        case "q":
            exit()
        case "":
            texts = fetch_and_display_headers()        
        case _:
            print_text(ans, texts)
    ans = input(prompt)
